heat_template_version: '2018-08-31'
description: Openstack Heat Stack for One-Day-Exercise Playground
parameters:
# Global Defaults
  image_linux:
    type: string
    description: Image to use for the instance
    default: 598e00cd-9ddd-416b-af51-aa52e3d23728
  flavor_linux:
    type: string
    description: Flavor to use for the instance
    default: m1.small
  key_name:
    type: string
    description: Name of the keypair to use
    default: clem1
  external_network:
    type: string
    description: Name of the external network to use
    default: 730cb16e-a460-4a87-8c73-50a2cb2293f9
  exercise_name:
    description: This is the name of the stack to create
    type: string
    default: Demo
#############################################################################
# Doctor Organization
  doctor_name:
    description: This is the name of the stack to create
    type: string
    default: doctor
  doctor_cidr:
    type: string
    description: CIDR of the DMZ network
    default: 10.10.10.0/24
  doctor_gateway:
    type: string
    description: IP of the gateway to connect
    default: 10.10.10.1
  doctor_server_1:
    type: string
    description: IP of the server to connect
    default: 10.10.10.11
  doctor_server_2:
    type: string
    description: IP of the server to connect
    default: 10.10.10.12
  doctor_server_3:
    type: string
    description: IP of the server to connect
    default: 10.10.10.13
  doctor_server_4:
    type: string
    description: IP of the server to connect
    default: 10.10.10.14
  doctor_server_5:
    type: string
    description: IP of the server to connect
    default: 10.10.10.15

# Nurse Organization
  nurse_name:
    description: This is the name of the stack to create
    type: string
    default: nurse
  nurse_cidr:
    type: string
    description: CIDR of the DMZ network
    default: 10.10.11.0/24
  nurse_gateway:
    type: string
    description: IP of the gateway to connect
    default: 10.10.11.1
  nurse_server_1:
    type: string
    description: IP of the server to connect
    default: 10.10.11.11
  nurse_server_2:
    type: string
    description: IP of the server to connect
    default: 10.10.11.12
  nurse_server_3:
    type: string
    description: IP of the server to connect
    default: 10.10.11.13
  nurse_server_4:
    type: string
    description: IP of the server to connect
    default: 10.10.11.14
  nurse_server_5:
    type: string
    description: IP of the server to connect
    default: 10.10.11.15

# Patient Organization
  patient_name:
    description: This is the name of the stack to create
    type: string
    default: secretary
  patient_cidr:
    type: string
    description: CIDR of the DMZ network
    default: 10.10.12.0/24
  patient_gateway:
    type: string
    description: IP of the gateway to connect
    default: 10.10.12.1
  patient_server_1:
    type: string
    description: IP of the server to connect
    default: 10.10.12.11
  patient_server_2:
    type: string
    description: IP of the server to connect
    default: 10.10.12.12
  patient_server_3:
    type: string
    description: IP of the server to connect
    default: 10.10.12.13
  patient_server_4:
    type: string
    description: IP of the server to connect
    default: 10.10.12.14
  patient_server_5:
    type: string
    description: IP of the server to connect
    default: 10.10.12.15

#############################################################################

resources:
# Global
  external_router:
    type: OS::Neutron::Router
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },'external-router']]
      external_gateway_info:
        network: { get_param: external_network }
      admin_state_up: true  
# Doctor
  doctor_network:
    type: OS::Neutron::Net
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'network']]
      admin_state_up: true
  
  doctor_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'subnet']]
      network_id: { get_resource: doctor_network }
      cidr: { get_param: doctor_cidr }
      gateway_ip: { get_param: doctor_gateway }
      dns_nameservers:
        - 129.241.0.200
      enable_dhcp: true
    
  doctor_router_port:
    depends_on:
      - doctor_subnet
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port']]
      network_id: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_gateway }
  
  doctor_router_interface:
    depends_on:
      - doctor_router_port
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: external_router }
      port_id: { get_resource: doctor_router_port }
  
  doctor_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'sg']]
      description: "Security group for VPN server"
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
  
  doctor_port_1:
    depends_on:
      - doctor_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port-1']]
      security_groups:
        - { get_resource: doctor_security_group }
      network: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_server_1 }

  doctor_vm_1:
    depends_on:
      - doctor_port_1
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'server-1']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: doctor_port_1 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '1' | ./launch.sh

  doctor_floating_ip_1:
    depends_on:
      - doctor_vm_1
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: doctor_port_1}

  
  doctor_port_2:
    depends_on:
      - doctor_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port-2']]
      security_groups:
        - { get_resource: doctor_security_group }
      network: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_server_2 }

  doctor_vm_2:
    depends_on:
      - doctor_port_2
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'server-2']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: doctor_port_2 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '1' | ./launch.sh

  doctor_floating_ip_2:
    depends_on:
      - doctor_vm_2
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: doctor_port_2}
  
  doctor_port_3:
    depends_on:
      - doctor_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port-3']]
      security_groups:
        - { get_resource: doctor_security_group }
      network: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_server_3 }

  doctor_vm_3:
    depends_on:
      - doctor_port_3
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'server-3']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: doctor_port_3 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '1' | ./launch.sh

  doctor_floating_ip_3:
    depends_on:
      - doctor_vm_3
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: doctor_port_3}
  
  doctor_port_4:
    depends_on:
      - doctor_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port-4']]
      security_groups:
        - { get_resource: doctor_security_group }
      network: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_server_4 }

  doctor_vm_4:
    depends_on:
      - doctor_port_4
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'server-4']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: doctor_port_4 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '1' | ./launch.sh

  doctor_floating_ip_4:
    depends_on:
      - doctor_vm_4
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: doctor_port_4}
  
  doctor_port_5:
    depends_on:
      - doctor_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'port-5']]
      security_groups:
        - { get_resource: doctor_security_group }
      network: { get_resource: doctor_network }
      fixed_ips:
        - subnet: { get_resource: doctor_subnet }
          ip_address: { get_param: doctor_server_5 }

  doctor_vm_5:
    depends_on:
      - doctor_port_5
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: doctor_name }, 'server-5']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: doctor_port_5 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '1' | ./launch.sh

  doctor_floating_ip_5:
    depends_on:
      - doctor_vm_5
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: doctor_port_5}


# Nurse
  nurse_network:
    type: OS::Neutron::Net
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'network']]
      admin_state_up: true
  
  nurse_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'subnet']]
      network_id: { get_resource: nurse_network }
      cidr: { get_param: nurse_cidr }
      gateway_ip: { get_param: nurse_gateway }
      dns_nameservers:
        - 129.241.0.200
      enable_dhcp: true
    
  nurse_router_port:
    depends_on:
      - nurse_subnet
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port']]
      network_id: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_gateway }
  
  nurse_router_interface:
    depends_on:
      - nurse_router_port
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: external_router }
      port_id: { get_resource: nurse_router_port }
  
  nurse_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'sg']]
      description: "Security group for VPN server"
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
  
  nurse_port_1:
    depends_on:
      - nurse_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port-1']]
      security_groups:
        - { get_resource: nurse_security_group }
      network: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_server_1 }

  nurse_vm_1:
    depends_on:
      - nurse_port_1
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'server-1']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: nurse_port_1 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '2' | ./launch.sh

  nurse_floating_ip_1:
    depends_on:
      - nurse_vm_1
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: nurse_port_1}

  
  nurse_port_2:
    depends_on:
      - nurse_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port-2']]
      security_groups:
        - { get_resource: nurse_security_group }
      network: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_server_2 }

  nurse_vm_2:
    depends_on:
      - nurse_port_2
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'server-2']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: nurse_port_2 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '2' | ./launch.sh

  nurse_floating_ip_2:
    depends_on:
      - nurse_vm_2
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: nurse_port_2}
  
  nurse_port_3:
    depends_on:
      - nurse_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port-3']]
      security_groups:
        - { get_resource: nurse_security_group }
      network: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_server_3 }

  nurse_vm_3:
    depends_on:
      - nurse_port_3
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'server-3']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: nurse_port_3 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '2' | ./launch.sh

  nurse_floating_ip_3:
    depends_on:
      - nurse_vm_3
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: nurse_port_3}
  
  nurse_port_4:
    depends_on:
      - nurse_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port-4']]
      security_groups:
        - { get_resource: nurse_security_group }
      network: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_server_4 }

  nurse_vm_4:
    depends_on:
      - nurse_port_4
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'server-4']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: nurse_port_4 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '2' | ./launch.sh

  nurse_floating_ip_4:
    depends_on:
      - nurse_vm_4
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: nurse_port_4}
  
  nurse_port_5:
    depends_on:
      - nurse_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'port-5']]
      security_groups:
        - { get_resource: nurse_security_group }
      network: { get_resource: nurse_network }
      fixed_ips:
        - subnet: { get_resource: nurse_subnet }
          ip_address: { get_param: nurse_server_5 }

  nurse_vm_5:
    depends_on:
      - nurse_port_5
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: nurse_name }, 'server-5']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: nurse_port_5 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '2' | ./launch.sh

  nurse_floating_ip_5:
    depends_on:
      - nurse_vm_5
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: nurse_port_5}

# Nurse
  patient_network:
    type: OS::Neutron::Net
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'network']]
      admin_state_up: true
  
  patient_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'subnet']]
      network_id: { get_resource: patient_network }
      cidr: { get_param: patient_cidr }
      gateway_ip: { get_param: patient_gateway }
      dns_nameservers:
        - 129.241.0.200
      enable_dhcp: true
    
  patient_router_port:
    depends_on:
      - patient_subnet
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port']]
      network_id: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_gateway }
  
  patient_router_interface:
    depends_on:
      - patient_router_port
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: external_router }
      port_id: { get_resource: patient_router_port }
  
  patient_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'sg']]
      description: "Security group for VPN server"
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp
  
  patient_port_1:
    depends_on:
      - patient_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port-1']]
      security_groups:
        - { get_resource: patient_security_group }
      network: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_server_1 }

  patient_vm_1:
    depends_on:
      - patient_port_1
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'server-1']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: patient_port_1 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '3' | ./launch.sh

  patient_floating_ip_1:
    depends_on:
      - patient_vm_1
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: patient_port_1}

  
  patient_port_2:
    depends_on:
      - patient_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port-2']]
      security_groups:
        - { get_resource: patient_security_group }
      network: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_server_2 }

  patient_vm_2:
    depends_on:
      - patient_port_2
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'server-2']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: patient_port_2 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '3' | ./launch.sh

  patient_floating_ip_2:
    depends_on:
      - patient_vm_2
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: patient_port_2}
  
  patient_port_3:
    depends_on:
      - patient_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port-3']]
      security_groups:
        - { get_resource: patient_security_group }
      network: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_server_3 }

  patient_vm_3:
    depends_on:
      - patient_port_3
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'server-3']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: patient_port_3 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '3' | ./launch.sh

  patient_floating_ip_3:
    depends_on:
      - patient_vm_3
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: patient_port_3}
  
  patient_port_4:
    depends_on:
      - patient_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port-4']]
      security_groups:
        - { get_resource: patient_security_group }
      network: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_server_4 }

  patient_vm_4:
    depends_on:
      - patient_port_4
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'server-4']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: patient_port_4 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '3' | ./launch.sh

  patient_floating_ip_4:
    depends_on:
      - patient_vm_4
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: patient_port_4}
  
  patient_port_5:
    depends_on:
      - patient_security_group
    type: OS::Neutron::Port
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'port-5']]
      security_groups:
        - { get_resource: patient_security_group }
      network: { get_resource: patient_network }
      fixed_ips:
        - subnet: { get_resource: patient_subnet }
          ip_address: { get_param: patient_server_5 }

  patient_vm_5:
    depends_on:
      - patient_port_5
    type: OS::Nova::Server
    properties:
      name: 
        list_join: ['-', [ { get_param: exercise_name },{ get_param: patient_name }, 'server-5']]
      image: { get_param: image_linux }
      flavor: { get_param: flavor_linux }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: patient_port_5 }
      user_data_format: RAW
      user_data: |
        #!/bin/bash
        nc -nlvkp 1234 &
        cd /home/kali/ProjectV1i
        echo '3' | ./launch.sh

  patient_floating_ip_5:
    depends_on:
      - patient_vm_5
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: patient_port_5}